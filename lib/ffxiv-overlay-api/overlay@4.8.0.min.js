!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).OverlayAPI={})}(this,(function(e){"use strict";function t(...e){console.log("[ffxiv-overlay-api]",...e)}function s(...e){console.error("[ffxiv-overlay-api]",...e)}function i(...e){console.warn("[ffxiv-overlay-api]",...e)}function n(e){return(Number.parseInt||window.parseInt)(`${e}`)||0}function a(e){const t=/([0-9]+)%/gi.exec(e);return t&&t[1]&&n(t[1])||0}function r(e){return{duration:e.duration||"",durationSeconds:n(e.DURATION),zoneName:e.CurrentZoneName||"",dps:n(e.encdps),last10DPS:n(e.Last10DPS),last30DPS:n(e.Last30DPS),last60DPS:n(e.Last60DPS),hps:n(e.enchps),damage:n(e.damage),healed:n(e.healed),shield:n(e.damageShield)}}function l(e){if("CombatData"===e.type){const t={active:"true"===e.isActive||!0===e.isActive,encounter:r(e.Encounter),combatant:[]};Object.keys(e.Combatant).filter((t=>Object.prototype.hasOwnProperty.call(e.Combatant,t))).forEach((s=>{"Limit Break"===s?t.limitBreak=function(e){let t="";const s=(e.maxhit||"").split("-");s.length>1&&(t=s[0]);let i="";const a=(e.maxheal||"").split("-");return a.length>1&&(i=a[0]),{name:"Limit Break",dps:n(e.encdps),hps:n(e.enchps),damage:n(e.damage),healed:n(e.healed),shield:n(e.damageShield),maxHit:t,maxHeal:i}}(e.Combatant[s]):t.combatant.push(function(e){let[t,s]=["",0];const i=(e.maxhit||"").split("-");i.length>1&&(t=i[0],s=n(i[1]));let[r,l]=["",0];const h=(e.maxheal||"").split("-");h.length>1&&(r=h[0],l=n(h[1]));const o=(c=(c=e.Job||"").toLowerCase(),["acn","arc","lnc","pgl","rog","thm","drg","mnk","nin","sam","rpr","vpr","smn","blm","rdm","pct","brd","mch","dnc","blu"].includes(c)?{name:c,type:"dps"}:["cnj","whm","sch","ast","sge"].includes(c)?{name:c,type:"healer"}:["gla","mrd","pld","war","drk","gnb"].includes(c)?{name:c,type:"tank"}:["crp","bsm","arm","gsm","lwr","wvr","alc","cul"].includes(c)?{name:c,type:"hand"}:["bot","fsh","min"].includes(c)?{name:c,type:"land"}:{name:c||"unknown",type:"unknown"});var c;return{name:e.name,job:o.name,jobType:o.type,dps:n(e.encdps),last10DPS:n(e.Last10DPS),last30DPS:n(e.Last30DPS),last60DPS:n(e.Last60DPS),hps:n(e.enchps),swings:n(e.swings),hits:n(e.hits),deaths:n(e.deaths),directHits:n(e.DirectHitCount),directHitPct:e.DirectHitPct||"",critHits:n(e.crithits),critHitPct:e["crithit%"]||"",directCritHits:n(e.CritDirectHitCount),directCritHitPct:e.CritDirectHitPct||"",damage:n(e.damage),damageTaken:n(e.damagetaken),damagePct:e["damage%"]||"",healed:n(e.healed),healsTaken:n(e.healstaken),healsPct:e["healed%"]||"",overHeal:n(e.overHeal),overHealPct:e.OverHealPct||"",shield:n(e.damageShield),shieldPct:`${Math.round((n(e.damageShield)/n(e.healed)||0)*a(e["healed%"]||""))||0}%`,maxHit:t,maxHitDamage:s,maxHeal:r,maxHealDamage:l}}(e.Combatant[s]))})),e.extendData=t}return e}function h(){return!!window.OverlayPluginApi}function o(...e){if(!e.length)return 0;let t=0;for(let s=0;s<e.length;s++)t+=e[s]||0;return t}function c(...e){if(!e.length)return"0%";let t=0;for(let s=0;s<e.length;s++){t+=a(e[s])}return`${t}%`}function d(...e){if(!e.length)return{hits:0,hitPct:"0%"};let t=0,s=0;for(let i=0;i<e.length;i++)t+=e[i].hits||0,s+=e[i].totalHits||0;return 0===s||0===t?{hits:0,hitPct:"0%"}:{hits:t,hitPct:`${Math.round(t/s*100)}%`}}function u(...e){if(!e.length)return"0%";let t=0,s=0;for(let i=0;i<e.length;i++){const n=a(e[i]);n>0&&(t+=n,s++)}return 0===s?"0%":`${Math.round(t/s)}%`}function m(...e){if(!e.length)return{hit:"",hitDamage:0};let t={hit:"",hitDamage:0};for(let s=0;s<e.length;s++)e[s].hitDamage>t.hitDamage&&(t=e[s]);return t}function g(...e){if(!e.length)return null;const t=[],s=[],i=[],n=[],a=[],r=[],l=[],h=[],g=[],p=[],f=[],v=[],_=[],P=[],w=[],y=[],b=[],H=[],C=[],D=[],S=[];e.forEach((e=>{t.push(e.dps),s.push(e.last10DPS),i.push(e.last30DPS),n.push(e.last60DPS),a.push(e.hps),r.push(e.swings),l.push(e.hits),h.push(e.deaths),g.push({hits:e.directHits,totalHits:e.hits}),p.push({hits:e.critHits,totalHits:e.hits}),f.push({hits:e.directCritHits,totalHits:e.hits}),v.push(e.damage),_.push(e.damageTaken),P.push(e.damagePct),w.push(e.healed),y.push(e.healsTaken),b.push(e.healsPct),H.push(e.overHeal),C.push(e.overHealPct),D.push({hit:e.maxHit,hitDamage:e.maxHitDamage}),S.push({hit:e.maxHeal,hitDamage:e.maxHealDamage})}));const x={name:e[0].name,job:e[0].job,jobType:e[0].jobType,dps:o(...t),last10DPS:o(...s),last30DPS:o(...i),last60DPS:o(...n),hps:o(...a),swings:o(...r),hits:o(...l),deaths:o(...h),damage:o(...v),damageTaken:o(..._),damagePct:c(...P),healed:o(...w),healsTaken:o(...y),healsPct:c(...b),overHeal:o(...H),overHealPct:u(...C)};let O=d(...g);x.directHits=O.hits,x.directHitPct=O.hitPct,O=d(...p),x.critHits=O.hits,x.critHitPct=O.hitPct,O=d(...f),x.directCritHits=O.hits,x.directCritHitPct=O.hitPct;let k=m(...D);return x.maxHit=k.hit,x.maxHitDamage=k.hitDamage,k=m(...S),x.maxHeal=k.hit,x.maxHealDamage=k.hitDamage,x}class p{constructor(){if(this._status=!1,this._eventCenter={CombatData:{started:!1,listeners:[]},LogLine:{started:!1,listeners:[]},ImportedLogLines:{started:!1,listeners:[]},ChangeZone:{started:!1,listeners:[]},ChangePrimaryPlayer:{started:!1,listeners:[]},OnlineStatusChanged:{started:!1,listeners:[]},PartyChanged:{started:!1,listeners:[]},BroadcastMessage:{started:!1,listeners:[]}},this._queue=[],this._wsURL=Array.from(/[?&]OVERLAY_WS=([^&]+)/.exec(window.location.href)||/[?&]HOST_PORT=([^&]+)/.exec(window.location.href)||[])[1]||"",this._ws=null,this._rseqCounter=0,this._responsePromises={},p._instance)return i("class OverlayAPI should only have one instance"),p._instance;this._wsURL?(t("initializing api in websocket mode..."),this._initWS()):(t("initializing api in callback mode..."),this._initCB()),window.dispatchOverlayEvent=this._triggerEvents.bind(this),p._instance||(p._instance=this)}_triggerEvents(e){if(this._eventCenter[e.type])for(const t of this._eventCenter[e.type].listeners)t(l(e))}_sendMessage(e,t){if(this._wsURL)if(this._status)try{this._ws.send(JSON.stringify(e))}catch(t){return void s(t,e)}else this._queue.push({msg:e});else if(this._status)try{window.OverlayPluginApi.callHandler(JSON.stringify(e),t)}catch(t){return void s(t,e)}else this._queue.push({msg:e,cb:t})}_initWS(){let e=this._wsURL;e.includes("/ws")||(e+=(e.endsWith("/")?"":"/")+"ws");const i=()=>{this._ws=new WebSocket(e),this._ws.addEventListener("error",(()=>{try{this._ws&&this._ws.close()}catch{}setTimeout((()=>{i()}),1e3)})),this._ws.addEventListener("open",(()=>{this._status=!0;for(const{msg:e}of this._queue)this._sendMessage(e);t("websocket mode api ready")})),this._ws.addEventListener("message",(e=>{let t;try{t=JSON.parse(e.data)}catch(t){return void s(t,e)}void 0!==t.rseq&&this._responsePromises[t.rseq]?(this._responsePromises[t.rseq](t),delete this._responsePromises[t.rseq]):this._triggerEvents(t)}))};i()}_initCB(){if(window.OverlayPluginApi&&window.OverlayPluginApi.ready){this._status=!0,window.__OverlayCallback=this._triggerEvents.bind(this);for(const{msg:e,cb:t}of this._queue)this._sendMessage(e,t);t("callback mode api ready")}else setTimeout((()=>{this._initCB()}),1e3)}addListener(e,s){this._eventCenter[e].started&&(i(`listener for \`${e}\` added after event transmission already started`),i("some events might have been missed"),i("please register your listeners before calling `startEvent()`")),"function"==typeof s&&(this._eventCenter[e].listeners.push(s),t(`listener for \`${e}\` added`))}removeListener(e,s){if("function"==typeof s){const n=this._eventCenter[e].listeners.indexOf(s);n>-1?(this._eventCenter[e].listeners.splice(n,1),t(`listener for \`${e}\` removed`)):i(`listener for \`${e}\` not found`)}}removeAllListener(e){this._eventCenter[e].listeners=[],t(`all listener for \`${e}\` removed`)}getAllListener(e){return this._eventCenter[e].listeners}startEvent(){const e=Object.keys(this._eventCenter).filter((e=>this._eventCenter[e].listeners.length>0));this._sendMessage({call:"subscribe",events:e}),t(`${e.length} types of event transmission started`)}async endEncounter(){this._status&&h()&&(await window.OverlayPluginApi.endEncounter(),t("encounter ended"))}callHandler(e){let t;if(this._wsURL){const s=this._rseqCounter++;e.rseq=s,t=new Promise((e=>{this._responsePromises[s]=e})),this._sendMessage(e)}else t=new Promise((t=>{this._sendMessage(e,(e=>{t(null==e?null:JSON.parse(e))}))}));return t}simulateData(e){this._triggerEvents(e)}}p._instance=null,p.mergeCombatant=g,p.isCEFSharp=h;const f={acn:"smn",arc:"brd",lnc:"drg",pgl:"mnk",rog:"nin",thm:"blm",cnj:"whm",gla:"pld",mrd:"war"},v={};Object.keys(f).forEach((e=>{v[f[e]]=e})),
/*! ffxiv-overlay-plugin | DSRKafuU (https://dsrkafuu.net) | Copyright (c) MIT License */
"undefined"!=typeof window&&"undefined"!=typeof document&&(window.OverlayAPI=p),e.OverlayAPI=p,e.class2job=function(e){return f[e]||e},e.isCEFSharp=h,e.job2class=function(e){return v[e]||e},e.mergeCombatant=g}));
//# sourceMappingURL=overlay.min.js.map
